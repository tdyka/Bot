import time
import threading
from datetime import datetime
from telebot import types
from database import db

# –°—Ç–∞—Ç—É—Å–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
ORDER_STATUSES = {
    "ordered": "üÜï –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ",
    "confirmed": "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ",
    "preparing": "üë®‚Äçüç≥ –ì–æ—Ç—É—î—Ç—å—Å—è",
    "cooking": "üî• –í–∏–ø—ñ–∫–∞—î—Ç—å—Å—è",
    "ready": "‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏",
    "on_way": "üöó –í –¥–æ—Ä–æ–∑—ñ",
    "delivered": "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
    "cancelled": "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ"
}


def create_order(user_id, order_id, items):
    """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ –ë–î"""
    return db.create_order(user_id, order_id, items)


def update_order_status(order_id, new_status, message=None):
    """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –ë–î"""
    db.update_order_status(order_id, new_status, message)


def get_order_info(order_number):
    """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ –ë–î"""
    return db.get_order_details(order_number)


def get_user_orders(user_id):
    """–û—Ç—Ä–∏–º—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î"""
    return db.get_user_orders(user_id)


def show_my_orders(bot, chat_id, user_id):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    user_orders = get_user_orders(user_id)

    if not user_orders:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main"))
        bot.send_message(
            chat_id,
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å.\n\n–û—Ñ–æ—Ä–º—ñ—Ç—å —Å–≤–æ—î –ø–µ—Ä—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!",
            reply_markup=markup
        )
        return

    # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º
    message = "üì¶ <b>–í–∞—à—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n\n"

    markup = types.InlineKeyboardMarkup(row_width=1)

    for order in user_orders[-10:]:  # –û—Å—Ç–∞–Ω–Ω—ñ 10 –∑–∞–º–æ–≤–ª–µ–Ω—å
        try:
            order_date = datetime.fromisoformat(order['created_at']).strftime("%d.%m.%Y %H:%M")
        except:
            order_date = "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞"

        status_emoji = {
            'ordered': 'üÜï', 'confirmed': '‚úÖ', 'preparing': 'üë®‚Äçüç≥',
            'cooking': 'üî•', 'ready': 'üì¶', 'on_way': 'üöö',
            'delivered': '‚úÖ', 'cancelled': '‚ùå'
        }

        status_text = {
            'ordered': '–ù–æ–≤–µ', 'confirmed': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ', 'preparing': '–ì–æ—Ç—É—î—Ç—å—Å—è',
            'cooking': '–í–∏–ø—ñ–∫–∞—î—Ç—å—Å—è', 'ready': '–ì–æ—Ç–æ–≤–æ', 'on_way': '–í –¥–æ—Ä–æ–∑—ñ',
            'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', 'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
        }

        emoji = status_emoji.get(order.get('status'), 'üì¶')
        status = status_text.get(order.get('status'), order.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ'))

        order_num_short = str(order['order_number'])[-8:]

        message += f"{emoji} <b>#{order_num_short}</b>\n"
        message += f"üìÖ {order_date}\n"
        message += f"üí∞ {order['total_amount']:.2f} –≥—Ä–Ω\n"
        message += f"üìä {status}\n\n"

        markup.add(
            types.InlineKeyboardButton(
                f"üìã –î–µ—Ç–∞–ª—ñ #{order_num_short}",
                callback_data=f"order_details_{order['order_number']}"
            )
        )

    markup.add(types.InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main"))
    bot.send_message(chat_id, message, reply_markup=markup, parse_mode='HTML')


def show_order_details(bot, chat_id, order_number):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    order = get_order_info(order_number)

    if not order:
        bot.send_message(chat_id, "‚ùå –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    try:
        order_date = datetime.fromisoformat(order['created_at']).strftime("%d.%m.%Y –æ %H:%M")
    except:
        order_date = "–ù–µ–≤—ñ–¥–æ–º–∞ –¥–∞—Ç–∞"

    status_emoji = {
        'ordered': 'üÜï', 'confirmed': '‚úÖ', 'preparing': 'üë®‚Äçüç≥',
        'cooking': 'üî•', 'ready': 'üì¶', 'on_way': 'üöö',
        'delivered': '‚úÖ', 'cancelled': '‚ùå'
    }

    status_text = {
        'ordered': '–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è', 'confirmed': '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ',
        'preparing': '–ì–æ—Ç—É—î—Ç—å—Å—è', 'cooking': '–í–∏–ø—ñ–∫–∞—î—Ç—å—Å—è',
        'ready': '–ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–¥–∞—á—ñ', 'on_way': '–í –¥–æ—Ä–æ–∑—ñ',
        'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', 'cancelled': '–°–∫–∞—Å–æ–≤–∞–Ω–æ'
    }

    emoji = status_emoji.get(order.get('status'), 'üì¶')
    status = status_text.get(order.get('status'), order.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ'))

    message = f"üìã <b>–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order['order_number']}</b>\n\n"
    message += f"üìÖ <b>–î–∞—Ç–∞:</b> {order_date}\n"
    message += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {status}\n\n"

    message += "üõí <b>–°–∫–ª–∞–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
    for item in order.get('items', []):
        total_price = item['price'] * item['quantity']
        message += f"  ‚Ä¢ {item['product_name']} x{item['quantity']} = {total_price:.2f} –≥—Ä–Ω\n"

    message += f"\nüí∞ <b>–†–∞–∑–æ–º:</b> {order['total_amount']:.2f} –≥—Ä–Ω\n"

    # –Ü—Å—Ç–æ—Ä—ñ—è —Å—Ç–∞—Ç—É—Å—ñ–≤
    if order.get('status_history'):
        message += f"\nüìú <b>–Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:</b>\n"
        for history in order['status_history']:
            try:
                hist_date = datetime.fromisoformat(history['created_at']).strftime("%d.%m %H:%M")
            except:
                hist_date = "‚Äî"
            hist_emoji = status_emoji.get(history.get('status'), '‚Ä¢')
            hist_msg = history.get('message', '–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ')
            message += f"  {hist_emoji} {hist_date} - {hist_msg}\n"

    # –ö–Ω–æ–ø–∫–∏
    markup = types.InlineKeyboardMarkup(row_width=2)

    # –ú–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ –∞–±–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω—ñ
    if order.get('status') in ['ordered', 'confirmed']:
        markup.add(
            types.InlineKeyboardButton(
                "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                callback_data=f"order_cancel_{order['order_number']}"
            )
        )

    markup.add(
        types.InlineKeyboardButton("‚óÄÔ∏è –î–æ —Å–ø–∏—Å–∫—É", callback_data="my_orders"),
        types.InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="back_main")
    )

    bot.send_message(chat_id, message, reply_markup=markup, parse_mode='HTML')


def send_order_status(bot, order_number):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    order = get_order_info(order_number)
    if not order:
        return False

    status = order.get("status", "ordered")
    status_text = ORDER_STATUSES.get(status, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å")

    message = f"üì¶ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_number}\n"
    message += f"–°—Ç–∞—Ç—É—Å: {status_text}\n\n"
    message += f"–¢–æ–≤–∞—Ä–∏:\n"
    for item in order.get("items", []):
        message += f"‚Ä¢ {item['product_name']} x{item['quantity']} ({item['price']} –≥—Ä–Ω)\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data=f"order_refresh_{order_number}"),
        types.InlineKeyboardButton("üìã –Ü—Å—Ç–æ—Ä—ñ—è", callback_data=f"order_history_{order_number}")
    )
    markup.add(
        types.InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")
    )

    bot.send_message(order['telegram_id'], message, reply_markup=markup)
    return True


def send_order_history(bot, call, order_number):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    order = get_order_info(order_number)
    if not order:
        bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    message = f"üìã –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_number}\n\n"

    for entry in order.get("status_history", []):
        try:
            status_time = datetime.fromisoformat(entry["created_at"]).strftime("%d.%m %H:%M")
        except:
            status_time = "‚Äî"
        message += f"üïê {status_time}\n"
        message += f"{entry.get('message', '–°—Ç–∞—Ç—É—Å –∑–º—ñ–Ω–µ–Ω–æ')}\n\n"

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚¨ÖÔ∏è –î–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data=f"order_details_{order_number}")
    )

    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, message, reply_markup=markup)


def handle_order_callback(bot, call, action, order_id, order_number=None):
    """–û–±—Ä–æ–±–ª—è—î callback –≤—ñ–¥ –∫–Ω–æ–ø–æ–∫ –∑–∞–º–æ–≤–ª–µ–Ω—å"""

    if action == "details":
        show_order_details(bot, call.message.chat.id, order_id)
        bot.answer_callback_query(call.id)

    elif action == "cancel":
        # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(
                "‚úÖ –¢–∞–∫, —Å–∫–∞—Å—É–≤–∞—Ç–∏",
                callback_data=f"order_confirm_cancel_{order_id}"
            )
        )
        markup.add(
            types.InlineKeyboardButton(
                "‚ùå –ù—ñ, –∑–∞–ª–∏—à–∏—Ç–∏",
                callback_data=f"order_details_{order_id}"
            )
        )
        bot.edit_message_text(
            f"‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}?",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)

    elif action == "confirm":
        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        if order_id.startswith("cancel_"):
            actual_order = order_id.replace("cancel_", "")
            order = get_order_info(actual_order)

            if order and order.get('status') in ['ordered', 'confirmed']:
                db.update_order_status(actual_order, 'cancelled', '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º')
                bot.answer_callback_query(call.id, "‚úÖ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
                bot.delete_message(call.message.chat.id, call.message.message_id)
                show_my_orders(bot, call.message.chat.id, call.from_user.id)
            else:
                bot.answer_callback_query(call.id, "‚ùå –ù–µ –º–æ–∂–Ω–∞ —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ü–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
        else:
            bot.answer_callback_query(call.id)

    elif action == "status":
        order = get_order_info(order_id)
        if order:
            send_order_status(bot, order_number or order_id)
            bot.answer_callback_query(call.id)
        else:
            bot.answer_callback_query(call.id, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

    elif action == "refresh":
        bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ")
        show_order_details(bot, call.message.chat.id, order_number or order_id)

    elif action == "history":
        send_order_history(bot, call, order_id)


def notify_status_change(bot, order_id, new_status, message=None):
    """–°–ø–æ–≤—ñ—â–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É"""
    order = get_order_info(order_id)
    if not order:
        return

    status_emoji = {
        "preparing": "üë®‚Äçüç≥",
        "cooking": "üî•",
        "ready": "‚úÖ",
        "on_way": "üöó",
        "delivered": "üéâ"
    }

    emoji = status_emoji.get(new_status, "üîî")

    text = f"{emoji} –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è #{order_id}\n\n"
    text += message or ORDER_STATUSES.get(new_status, "–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ")

    if new_status == "delivered":
        text += "\n\n‚≠êÔ∏è –î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!"
        text += "\nüôè –ë—É–¥–µ–º–æ —Ä–∞–¥—ñ –≤–∞—à–æ–º—É –≤—ñ–¥–≥—É–∫—É"

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("üì¶ –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f"order_details_{order_id}"),
        types.InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_main")
    )

    bot.send_message(order['telegram_id'], text, reply_markup=markup)


# –Ü–º—ñ—Ç–∞—Ü—ñ—è –¥–æ—Å—Ç–∞–≤–∫–∏
def simulate_delivery(bot, order_number):
    """–Ü–º—ñ—Ç—É—î –ø—Ä–æ—Ü–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"""
    statuses = [
        ("preparing", "üë®‚Äçüç≥ –ü–æ—á–∞–ª–∏ –≥–æ—Ç—É–≤–∞—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", 5),
        ("cooking", "üî• –í–∏–ø—ñ–∫–∞—î—Ç—å—Å—è –≤ –ø–µ—á—ñ", 5),
        ("ready", "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–µ—Ä–µ–¥–∞—î–º–æ –∫—É—Ä'—î—Ä—É", 3),
        ("on_way", "üöó –ö—É—Ä'—î—Ä –≤–∏—ó—Ö–∞–≤ –¥–æ –≤–∞—Å", 5),
        ("delivered", "‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ! –°–º–∞—á–Ω–æ–≥–æ!", 0)
    ]

    def update_statuses():
        for status, msg, wait_seconds in statuses:
            time.sleep(wait_seconds)
            db.update_order_status(order_number, status, msg)
            notify_status_change(bot, order_number, status, msg)

    thread = threading.Thread(target=update_statuses)
    thread.daemon = True
    thread.start()