import telebot
import webbrowser
from telebot import types
import os
from dotenv import load_dotenv
import logging
import pizza
import burgers
import grill
import pasta
import salads
import cocktails
import desserts
import cart
import orders
from database import db

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    filename='bot_errors.log',
    level=logging.ERROR,
    format='%(asctime)s - %(levelname)s - %(message)s',
    encoding='utf-8'
)

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")

bot = telebot.TeleBot(BOT_TOKEN)
print("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")


# === –§–£–ù–ö–¶–Ü–á –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û–ì–û –ë–ï–ö–ê–ü–£ ===

def backup_database():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –±–µ–∫–∞–ø—É"""
    try:
        backup_path = db.create_backup()
        if backup_path:
            print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –±–µ–∫–∞–ø: {backup_path}")
            logging.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –±–µ–∫–∞–ø: {backup_path}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –±–µ–∫–∞–ø—É: {e}")


# –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∫–∞–ø –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
backup_database()


# === –ö–û–ú–ê–ù–î–ò –ë–û–¢–ê ===

@bot.message_handler(commands=['start'])
def main(message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –≤—ñ—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    try:
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î
        db.add_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        bot.send_message(message.chat.id, f"–í—ñ—Ç–∞—é, {message.from_user.first_name}! üëã\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /menu –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–µ–Ω—é.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /start –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@bot.message_handler(commands=['site'])
def site(message):
    try:
        webbrowser.open('https://classroom.google.com/u/1/c/ODAwNjM0NDczNDk0?hl=ru')
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Å–∞–π—Ç—É: {e}")


@bot.message_handler(commands=['menu'])
def menu(message):
    try:
        categories = db.get_categories()

        markup = types.InlineKeyboardMarkup(row_width=2)

        for category in categories:
            markup.add(
                types.InlineKeyboardButton(
                    f"{category['emoji']} {category['name']}",
                    callback_data=f"cat_{category['name']}"
                )
            )

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –∫–æ—à–∏–∫–∞
        cart_count = len(cart.get_cart(message.from_user.id))
        cart_text = f"üõí –ö–æ—à–∏–∫ ({cart_count})" if cart_count > 0 else "üõí –ö–æ—à–∏–∫"

        markup.add(
            types.InlineKeyboardButton(cart_text, callback_data="view_cart"),
            types.InlineKeyboardButton("üì¶ –ú–æ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="my_orders")
        )
        markup.add(types.InlineKeyboardButton("üî• –ê–∫—Ü—ñ—è ¬´–°–µ—Ä–µ–¥–∞¬ª", callback_data="promo_wed"))

        bot.send_message(message.chat.id, f"{message.from_user.first_name}, –æ–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é üëá", reply_markup=markup)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


@bot.message_handler(commands=['cart'])
def show_cart_command(message):
    try:
        cart.show_cart(bot, message.chat.id, message.from_user.id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞.")


@bot.message_handler(commands=['orders'])
def my_orders_command(message):
    try:
        orders.show_my_orders(bot, message.chat.id, message.from_user.id)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å.")


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö callback –∑–∞–ø–∏—Ç—ñ–≤"""
    try:
        # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó
        if call.data.startswith("cat_"):
            category = call.data.split("_", 1)[1]
            bot.answer_callback_query(call.id)

            if category == "–ü—ñ—Ü–∞":
                pizza.show_pizza_list(bot, call.message.chat.id)
            elif category == "–ë—É—Ä–≥–µ—Ä–∏":
                burgers.show_burger_list(bot, call.message.chat.id)
            elif category == "–ì—Ä–∏–ª—å":
                grill.show_grill_list(bot, call.message.chat.id)
            elif category == "–ü–∞—Å—Ç–∞":
                pasta.show_pasta_list(bot, call.message.chat.id)
            elif category == "–°–∞–ª–∞—Ç–∏":
                salads.show_salad_list(bot, call.message.chat.id)
            elif category == "–ù–∞–ø–æ—ó":
                cocktails.show_cocktail_list(bot, call.message.chat.id)
            elif category == "–î–µ—Å–µ—Ä—Ç–∏":
                desserts.show_dessert_list(bot, call.message.chat.id)
            else:
                bot.answer_callback_query(call.id)
                bot.send_message(call.message.chat.id,
                                 f"–ü–æ–∫–∏ –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ —É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó {category}")

        # –ü—Ä–æ–¥—É–∫—Ç–∏
        elif call.data.startswith("pizza_"):
            pizza_name = call.data.split("_", 1)[1]
            pizza.handle_pizza_callback(bot, call, pizza_name)
        elif call.data.startswith("burger_"):
            burger_id = call.data.split("_", 1)[1]
            burgers.handle_burger_callback(bot, call, burger_id)
        elif call.data.startswith("grill_"):
            grill_id = call.data.split("_", 1)[1]
            grill.handle_grill_callback(bot, call, grill_id)
        elif call.data.startswith("pasta_"):
            pasta_id = call.data.split("_", 1)[1]
            pasta.handle_pasta_callback(bot, call, pasta_id)
        elif call.data.startswith("salad_"):
            salad_id = call.data.split("_", 1)[1]
            salads.handle_salad_callback(bot, call, salad_id)
        elif call.data.startswith("cocktail_"):
            cocktail_id = call.data.split("_", 1)[1]
            cocktails.handle_cocktail_callback(bot, call, cocktail_id)
        elif call.data.startswith("dessert_"):
            dessert_id = call.data.split("_", 1)[1]
            desserts.handle_dessert_callback(bot, call, dessert_id)

        # –î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫
        elif call.data.startswith("add_cart_"):
            product_name = call.data.split("add_cart_", 1)[1]
            if cart.add_to_cart(call.from_user.id, product_name):
                bot.answer_callback_query(call.id, f"‚úÖ {product_name} –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫!")
            else:
                bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è")

        # –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –∫–æ—à–∏–∫–∞
        elif call.data.startswith("remove_"):
            product_name = call.data.split("remove_", 1)[1]
            cart.handle_cart_callback(bot, call, "remove", product_name)

        # –ö–æ—à–∏–∫
        elif call.data == "view_cart":
            cart.handle_cart_callback(bot, call, "view")
        elif call.data == "clear_cart":
            cart.handle_cart_callback(bot, call, "clear")
        elif call.data == "checkout":
            cart.handle_cart_callback(bot, call, "checkout")
        elif call.data == "pay_card":
            cart.handle_cart_callback(bot, call, "pay_card")
        elif call.data == "pay_cash":
            cart.handle_cart_callback(bot, call, "pay_cash")
        elif call.data == "confirm_payment":
            cart.handle_cart_callback(bot, call, "confirm_payment")

        # –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è
        elif call.data.startswith("order_"):
            parts = call.data.split("_")
            action = parts[1]
            order_number = "_".join(parts[2:])
            orders.handle_order_callback(bot, call, action, order_number)

        elif call.data == "my_orders":
            bot.answer_callback_query(call.id)
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
            try:
                bot.delete_message(call.message.chat.id, call.message.message_id)
            except:
                pass
            orders.show_my_orders(bot, call.message.chat.id, call.from_user.id)

        # –ê–∫—Ü—ñ—è
        elif call.data == "promo_wed":
            bot.answer_callback_query(call.id)
            bot.send_message(call.message.chat.id,
                             "üî• –ê–∫—Ü—ñ—è ¬´–°–µ—Ä–µ–¥–∞¬ª!\n–ö–æ–∂–Ω–∞ –¥—Ä—É–≥–∞ –ø—ñ—Ü—Ü–∞ –∑—ñ –∑–Ω–∏–∂–∫–æ—é 50% —É —Å–µ—Ä–µ–¥—É!")

        # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        elif call.data == "back_pizza":
            bot.answer_callback_query(call.id)
            pizza.show_pizza_list(bot, call.message.chat.id)
        elif call.data == "back_burger":
            bot.answer_callback_query(call.id)
            burgers.show_burger_list(bot, call.message.chat.id)
        elif call.data == "back_grill":
            bot.answer_callback_query(call.id)
            grill.show_grill_list(bot, call.message.chat.id)
        elif call.data == "back_cocktail":
            bot.answer_callback_query(call.id)
            cocktails.show_cocktail_list(bot, call.message.chat.id)
        elif call.data == "back_pasta":
            bot.answer_callback_query(call.id)
            pasta.show_pasta_list(bot, call.message.chat.id)
        elif call.data == "back_salad":
            bot.answer_callback_query(call.id)
            salads.show_salad_list(bot, call.message.chat.id)
        elif call.data == "back_dessert":
            bot.answer_callback_query(call.id)
            desserts.show_dessert_list(bot, call.message.chat.id)
        elif call.data == "back_main":
            bot.answer_callback_query(call.id)
            menu(call.message)

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ callback {call.data}: {e}")
        bot.answer_callback_query(call.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


# –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
print("ü§ñ –ë–æ—Ç –ø—Ä–∞—Ü—é—î. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏.")
bot.polling(non_stop=True)